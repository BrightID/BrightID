diff --git a/node_modules/react-native-code-push/android/codepush.gradle b/node_modules/react-native-code-push/android/codepush.gradle
index 78134d3..dafd45b 100644
--- a/node_modules/react-native-code-push/android/codepush.gradle
+++ b/node_modules/react-native-code-push/android/codepush.gradle
@@ -2,8 +2,8 @@
 
 import java.nio.file.Paths;
 
-def config = project.hasProperty("react") ? project.react : [];
-def bundleAssetName = config.bundleAssetName ?: "index.android.bundle"
+def config = project.extensions.findByName("react") ?: []
+def bundleAssetName = config.bundleAssetName.get() ?: "index.android.bundle"
 
 // because elvis operator
 def elvisFile(thing) {
@@ -23,11 +23,20 @@ android.buildTypes.each { buildType ->
     buildType.resValue 'string', "CODE_PUSH_APK_BUILD_TIME", String.format("\"%d\"", System.currentTimeMillis())
 }
 
+
 gradle.projectsEvaluated {
+
+    def debuggableVariants = config.debuggableVariants.get() ?: ['debug']
+
     android.applicationVariants.all { variant ->
+        // No code push for debuggable variants
+        if (debuggableVariants.contains(variant.name)) {
+            return;
+        }
+
         def nodeModulesPath;
         if (config.root) {
-            nodeModulesPath = Paths.get(config.root, "/node_modules");
+            nodeModulesPath = Paths.get(config.root.asFile.get().absolutePath, "/node_modules");
         } else if (project.hasProperty('nodeModulesPath')) {
             nodeModulesPath = project.nodeModulesPath
         } else {
@@ -42,16 +51,16 @@ gradle.projectsEvaluated {
         def jsBundleFile;
 
         // Additional node commandline arguments
-        def nodeExecutableAndArgs = config.nodeExecutableAndArgs ?: ["node"]
-        def extraPackagerArgs = config.extraPackagerArgs ?: []
+        def nodeExecutableAndArgs = config.nodeExecutableAndArgs.get() ?: ["node"]
+        def extraPackagerArgs = config.extraPackagerArgs.get() ?: []
 
         // Make this task run right after the bundle task
         def generateBundledResourcesHash;
 
-        if (variant.hasProperty("bundleJsAndAssets")) {
-            def reactBundleTask = variant.bundleJsAndAssets
-            jsBundleDir = reactBundleTask.generatedAssetsFolders[0].absolutePath
-            resourcesDir = reactBundleTask.generatedResFolders[0].absolutePath
+        def reactBundleTask = tasks.findByName("createBundle${targetName}JsAndAssets")
+        if (reactBundleTask) {
+            jsBundleDir = reactBundleTask.property('jsBundleDir').asFile.get()
+            resourcesDir = reactBundleTask.property('resourcesDir').asFile.get()
             jsBundleFile = file("$jsBundleDir/$bundleAssetName")
 
             generateBundledResourcesHash = tasks.create(
@@ -59,20 +68,18 @@ gradle.projectsEvaluated {
                     type: Exec) {
                 commandLine (*nodeExecutableAndArgs, "${nodeModulesPath}/react-native-code-push/scripts/generateBundledResourcesHash.js", resourcesDir, jsBundleFile, jsBundleDir)
 
-                enabled config."bundleIn${targetName}" ||
-                config."bundleIn${variant.buildType.name.capitalize()}" ?:
-                targetName.toLowerCase().contains("release")
+                enabled !debuggableVariants.contains(variant.name) ?: targetName.toLowerCase().contains("release")
             }
 
             runBefore("merge${targetName}Resources", generateBundledResourcesHash)
             runBefore("merge${targetName}Assets", generateBundledResourcesHash)
         } else {
             def jsBundleDirConfigName = "jsBundleDir${targetName}"
-            jsBundleDir = elvisFile(config."$jsBundleDirConfigName") ?:
+            jsBundleDir = elvisFile(config."$jsBundleDirConfigName").get() ?:
                     file("$buildDir/intermediates/assets/${targetPath}")
 
             def resourcesDirConfigName = "resourcesDir${targetName}"
-            resourcesDir = elvisFile(config."${resourcesDirConfigName}") ?:
+            resourcesDir = elvisFile(config."${resourcesDirConfigName}").get() ?:
                     file("$buildDir/intermediates/res/merged/${targetPath}")
 
             // In case version of 'Android Plugin for Gradle'' is lower than 1.3.0
@@ -107,7 +114,8 @@ gradle.projectsEvaluated {
             generateBundledResourcesHash.dependsOn("recordFilesBeforeBundleCommand${targetName}")
         }
 
-        generateBundledResourcesHash.dependsOn("bundle${targetName}JsAndAssets")
+        generateBundledResourcesHash.dependsOn("createBundle${targetName}JsAndAssets")
+
         runBefore("processArmeabi-v7a${targetName}Resources", generateBundledResourcesHash)
         runBefore("processX86${targetName}Resources", generateBundledResourcesHash)
         runBefore("processUniversal${targetName}Resources", generateBundledResourcesHash)
